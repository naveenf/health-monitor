from ..model.llama_wrapper import LlamaWrapper
from typing import Dict, Any, List
import logging

class AnalysisService:
    def __init__(self, model_path: str = None):
        """
        Initialize the analysis service.
        
        Args:
            model_path: Path to the model or model identifier
        """
        self.logger = logging.getLogger(__name__)
        self.model = LlamaWrapper(model_path=model_path)
        
    def analyze_results(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyze blood test results and generate insights.
        
        Args:
            data: Dictionary containing patient info and blood parameters
            
        Returns:
            Dictionary with analysis results including AI insights
        """
        # Perform basic analysis first
        basic_analysis = self._perform_basic_analysis(data['blood_parameters'])
        
        # Add AI-powered analysis if parameters are present
        ai_analysis = {}
        if data['blood_parameters']:
            try:
                ai_analysis = self.model.analyze_blood_parameters(
                    data['blood_parameters'],
                    data['patient']
                )
                
                # Add medical disclaimer for AI-generated content
                ai_analysis["disclaimer"] = (
                    "This analysis is generated by an AI model and should be reviewed "
                    "by a healthcare professional. It is not a substitute for "
                    "professional medical advice, diagnosis, or treatment."
                )
            except Exception as e:
                self.logger.error(f"AI analysis failed: {str(e)}")
                ai_analysis = {
                    "error": str(e),
                    "disclaimer": "AI analysis unavailable. Please consult a healthcare professional."
                }
        
        # Combine results
        result = {
            "patient": data['patient'],
            "test": data['test'],
            "blood_parameters": data['blood_parameters'],
            "basic_analysis": basic_analysis,
            "ai_analysis": ai_analysis
        }
        
        return result
    
    def _perform_basic_analysis(self, blood_parameters: Dict[str, Any]) -> Dict[str, Any]:
        """
        Perform basic analysis on blood parameters without using AI.
        
        Args:
            blood_parameters: Dictionary of blood parameters and their values
            
        Returns:
            Dictionary with basic analysis results
        """
        abnormal_parameters = []
        
        for name, data in blood_parameters.items():
            value = data.get('value')
            range_vals = data.get('range', [None, None])
            
            if range_vals and len(range_vals) == 2 and range_vals[0] and range_vals[1]:
                min_val = float(range_vals[0])
                max_val = float(range_vals[1])
                
                if value < min_val:
                    abnormal_parameters.append({
                        "name": name,
                        "value": value,
                        "status": "low",
                        "deviation": ((min_val - value) / min_val) * 100
                    })
                elif value > max_val:
                    abnormal_parameters.append({
                        "name": name,
                        "value": value,
                        "status": "high",
                        "deviation": ((value - max_val) / max_val) * 100
                    })
        
        return {
            "abnormal_count": len(abnormal_parameters),
            "abnormal_parameters": abnormal_parameters,
            "critical_count": sum(1 for p in abnormal_parameters if p["deviation"] > 20)
        }